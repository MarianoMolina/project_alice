from __future__ import annotations
from typing import Optional, Literal, Dict, Any, List, TYPE_CHECKING
from pydantic import Field, field_validator
from workflow.core.data_structures.base_models import BaseDataStructure
from workflow.core.data_structures.central_types import ReferencesType

if TYPE_CHECKING:
    from workflow.core.data_structures.references import References

def get_default_references():
    from workflow.core.data_structures.references import References
    return References()

class TaskResponse(BaseDataStructure):
    id: Optional[str] = Field(None, description="The id of the task", alias="_id")
    task_id: Optional[str] = Field(None, description="The id of the task")
    task_name: str = Field(..., description="The name of the task")
    task_description: str = Field(..., description="A detailed description of the task")
    status: Literal["pending", "complete", "failed"] = Field(..., description="The current status of the task")
    result_code: int = Field(..., description="The result code indicating the success or failure of the task")
    result_diagnostic: Optional[str] = Field(None, description="Diagnostic information for the task, if any")
    task_inputs: Optional[Dict[str, Any]] = Field(None, description="The inputs provided to the task")
    usage_metrics: Optional[Dict[str, Any]] = Field(None, description="Usage metrics for the task, like generated tokens, time taken, and cost.")
    execution_history: Optional[List[Dict[str, Any]]] = Field(None, description="Execution history of the task")
    task_outputs: Optional[str] = Field(None, description="The output generated by the task")
    references: ReferencesType = Field(default_factory=get_default_references, description="References associated with this task response")

    def __str__(self) -> str:
        base_str = f"{self.task_name}: {self.task_description}\n\nTask Output:\n\n{self.task_outputs}"
        if self.references:
            base_str += f"\n\nReferences: {self.references.summary()}"
        return base_str
    
    def model_dump(self, *args, **kwargs):
        data = super().model_dump(*args, **kwargs)
        data['references'] = self.references.model_dump(*args, **kwargs)
        return data
    
    @field_validator('references')
    def validate_references(cls, v):
        from workflow.core.data_structures.references import References
        if isinstance(v, References):
            return v
        elif isinstance(v, dict):
            return References(**v)
        else:
            return References()