services:
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT_DOCKER}"
    depends_on:
      backend:
        condition: service_healthy
      workflow:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${FRONTEND_PORT_DOCKER:-3000}
      CI: "true"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${REACT_APP_BACKEND_PORT}:${BACKEND_PORT_DOCKER}"
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_started
      volume-init:
        condition: service_completed_successfully
    volumes:
      - logs:/app/logs
      - shared-uploads:/app/shared-uploads
    environment:
      NODE_ENV: ${NODE_ENV:-production}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${REACT_APP_BACKEND_HOST:-backend}:${BACKEND_PORT_DOCKER}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:6.0-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  workflow:
    build:
      context: ./workflow
    env_file:
      - .env
    ports:
      - "${REACT_APP_WORKFLOW_PORT}:${WORKFLOW_PORT_DOCKER}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - logs:/app/logs
      - shared-uploads:/app/shared-uploads:ro
      - model_cache:/app/model_cache
    depends_on:
      volume-init:
        condition: service_completed_successfully
      python_image:
        condition: service_completed_successfully
      bash_image:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${REACT_APP_WORKFLOW_HOST:-workflow}:${WORKFLOW_PORT_DOCKER}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  volume-init:
    image: busybox
    attach: false
    volumes:
      - ${COMPOSE_PROJECT_DIR}/logs:/logs
      - ${COMPOSE_PROJECT_DIR}/shared-uploads:/shared-uploads
      - ${COMPOSE_PROJECT_DIR}/model_cache:/model_cache 
    command: |
      sh -c "
        echo 'Starting volume initialization' &&
        ls -la / &&
        echo 'Creating directories' &&
        mkdir -p /logs /shared-uploads /model_cache &&
        echo 'Setting permissions' &&
        chmod -R 755 /logs /shared-uploads /model_cache &&
        chown -R 1000:1000 /logs /shared-uploads /model_cache &&
        echo 'Finished volume initialization' &&
        ls -la /logs /shared-uploads /model_cache 
      "

  mongo:
    image: mongo:latest
    ports:
      - "26017:27017"
    volumes:
      - mongo_data:/data/db
    attach: false

  python_image:
    build:
      context: .
      dockerfile: workflow/Dockerfile.python
    image: mypython:latest
    command: ["bash"]

  bash_image:
    build:
      context: .
      dockerfile: workflow/Dockerfile.bash
    image: mybash:latest
    command: ["bash"]

  javascript_image:
    build:
      context: .
      dockerfile: workflow/Dockerfile.js
    image: myjs:latest
    command: ["bash"]

volumes:
  mongo_data:
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${COMPOSE_PROJECT_DIR}/logs
  shared-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${COMPOSE_PROJECT_DIR}/shared-uploads
  model_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${COMPOSE_PROJECT_DIR}/model_cache