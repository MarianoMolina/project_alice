services:
  frontend:
    image: ${REGISTRY_PATH}/frontend:hosted
    depends_on:
      backend:
        condition: service_healthy
      workflow:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${FRONTEND_PORT_DOCKER:-3000}
      CI: "true"
      REACT_APP_DEPLOYMENT: "hosted"

  backend:
    image: ${REGISTRY_PATH}/backend:hosted
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_started
      volume-init:
        condition: service_completed_successfully
    volumes:
      - logs:/app/logs
      - shared-uploads:/app/shared-uploads
    environment:
      NODE_ENV: ${NODE_ENV:-production}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${BACKEND_HOST:-localhost}:${BACKEND_PORT_DOCKER}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:6.0-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  workflow:
    image: ${REGISTRY_PATH}/workflow:hosted
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - logs:/app/logs
      - shared-uploads:/app/shared-uploads:ro
      - model_cache:/app/model_cache
    depends_on:
      volume-init:
        condition: service_completed_successfully
      python_image:
        condition: service_completed_successfully
      bash_image:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${WORKFLOW_HOST:-localhost}:${WORKFLOW_PORT_DOCKER}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  volume-init:
    image: busybox
    attach: false
    volumes:
      - ${COMPOSE_PROJECT_DIR}/logs:/logs
      - ${COMPOSE_PROJECT_DIR}/shared-uploads:/shared-uploads
      - ${COMPOSE_PROJECT_DIR}/model_cache:/model_cache 
    command: |
      sh -c "
        echo 'Starting volume initialization' &&
        ls -la / &&
        echo 'Creating directories' &&
        mkdir -p /logs /shared-uploads /model_cache &&
        echo 'Setting permissions' &&
        chmod -R 755 /logs /shared-uploads /model_cache &&
        chown -R 1000:1000 /logs /shared-uploads /model_cache &&
        echo 'Finished volume initialization' &&
        ls -la /logs /shared-uploads /model_cache 
      "

  mongo:
    image: mongo:latest
    ports:
      - "26017:27017"
    volumes:
      - mongo_data:/data/db
    attach: false
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      
  python_image:
    image: ${REGISTRY_PATH}/mypython:latest
    command: ["bash"]

  bash_image:
    image: ${REGISTRY_PATH}/mybash:latest
    command: ["bash"]

  javascript_image:
    image: ${REGISTRY_PATH}/myjs:latest
    command: ["bash"]

  nginx:
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
      workflow:
        condition: service_healthy
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
volumes:
  mongo_data:
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${COMPOSE_PROJECT_DIR}/logs
  shared-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${COMPOSE_PROJECT_DIR}/shared-uploads
  model_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${COMPOSE_PROJECT_DIR}/model_cache