import React, { useState, useCallback, useEffect } from 'react';
import {
    TextField,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    SelectChangeEvent,
    Typography
} from '@mui/material';
import { MessageComponentProps, MessageType, getDefaultMessageForm } from '../../../../types/MessageTypes';
import GenericFlexibleView from '../../common/enhanced_component/FlexibleView';
import useStyles from '../MessageStyles';
import DataClusterManager from '../../data_cluster/data_cluster_manager/DataClusterManager';

const MessageFlexibleView: React.FC<MessageComponentProps> = ({
    item,
    onChange,
    mode,
    handleSave,
    handleDelete
}) => {
    const [form, setForm] = useState<Partial<MessageType>>(item || getDefaultMessageForm());
    const [isSaving, setIsSaving] = useState(false);
    const classes = useStyles();

    useEffect(() => {
        if (isSaving) {
            handleSave();
            setIsSaving(false);
        }
    }, [isSaving, handleSave]);
    
    useEffect(() => {
        if (item) {
            setForm(item);
        } else if (!item || Object.keys(item).length === 0)  {
            onChange(getDefaultMessageForm());
        }
    }, [item, onChange]);

    const isEditMode = mode === 'edit' || mode === 'create';

    const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setForm(prevForm => ({ ...prevForm, [name]: value }));
    }, []);

    const handleSelectChange = useCallback((e: SelectChangeEvent<string>) => {
        const { name, value } = e.target;
        setForm(prevForm => ({ ...prevForm, [name]: value }));
    }, []);

    const handleLocalSave = useCallback(() => {
        onChange(form);
        setIsSaving(true);
    }, [form, onChange]);

    const handleLocalDelete = useCallback(() => {
        if (item && Object.keys(item).length > 0 && handleDelete) {
            handleDelete(item);
        }
    }, [item, handleDelete]);

    const title = mode === 'create' ? 'Create New Message' : mode === 'edit' ? 'Edit Message' : 'Message Details';
    const saveButtonText = form._id ? 'Update Message' : 'Create Message';

    return (
        <GenericFlexibleView
            elementType='Message'
            title={title}
            onSave={handleLocalSave}
            onDelete={handleLocalDelete}
            saveButtonText={saveButtonText}
            isEditMode={isEditMode}
            item={item as MessageType}
            itemType='messages'
        >
            <Typography variant="h6" className={classes.titleText}>Role</Typography>
            <FormControl fullWidth margin="normal">
                <InputLabel>Role</InputLabel>
                <Select
                    name="role"
                    value={form.role || ''}
                    onChange={handleSelectChange}
                    disabled={!isEditMode}
                >
                    <MenuItem value="user">User</MenuItem>
                    <MenuItem value="assistant">Assistant</MenuItem>
                    <MenuItem value="system">System</MenuItem>
                    <MenuItem value="tool">Tool</MenuItem>
                </Select>
            </FormControl>

            <Typography variant="h6" className={classes.titleText}>Content</Typography>
            <TextField
                fullWidth
                multiline
                rows={4}
                name="content"
                label="Content"
                value={form.content || ''}
                onChange={handleInputChange}
                margin="normal"
                disabled={!isEditMode}
            />

            <Typography variant="h6" className={classes.titleText}>Generated By</Typography>
            <FormControl fullWidth margin="normal">
                <InputLabel>Generated By</InputLabel>
                <Select
                    name="generated_by"
                    value={form.generated_by || ''}
                    onChange={handleSelectChange}
                    disabled={!isEditMode}
                >
                    <MenuItem value="user">User</MenuItem>
                    <MenuItem value="llm">LLM</MenuItem>
                    <MenuItem value="tool">Tool</MenuItem>
                </Select>
            </FormControl>
            <Typography variant="h6" className={classes.titleText}>References</Typography>
            <DataClusterManager 
            dataCluster={form.references} 
            isEditable={true} 
            onDataClusterChange={(dataCluster)=>setForm(prevForm => ({ ...prevForm, data_cluster: dataCluster }))} 
            flatten={false} 
            showSelect={false}
            showCreate={false}
            />
        </GenericFlexibleView>
    );
};

export default MessageFlexibleView;