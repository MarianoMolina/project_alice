import React from 'react';
import {
    Typography,
    Box,
} from '@mui/material';
import { Person, AccessTime, AttachFile, TextSnippet, Engineering, PersonPin, Functions } from '@mui/icons-material';
import { MessageComponentProps } from '../../../../types/MessageTypes';
import CommonCardView from '../../common/enhanced_component/CardView';
import { References } from '../../../../types/ReferenceTypes';
import useStyles from '../MessageStyles';
import CustomMarkdown from '../../../ui/markdown/CustomMarkdown';
import { CodeBlock } from '../../../ui/markdown/CodeBlock';
import ReferenceChip from '../../common/references/ReferenceChip';

const hasAnyReferences = (references: References | undefined): boolean => {
    if (!references) return false;
    return !!(
        references.messages?.length ||
        references.files?.length ||
        references.task_responses?.length ||
        references.url_references?.length ||
        references.string_outputs?.length
    );
};

const MessageCardView: React.FC<MessageComponentProps> = ({
    item,
}) => {
    const classes = useStyles();
    if (!item) {
        return <Typography>No message data available.</Typography>;
    }

    const renderReferences = () => {
        if (!item.references || !hasAnyReferences(item.references)) return 'No references';
        return (
            <Box>
                <Typography variant="subtitle2">References:</Typography>
                <Box display="flex" flexWrap="wrap" gap={1}>
                    {item.references.messages?.map((msg, index) => (
                        <ReferenceChip 
                            key={`msg-${index}`} 
                            reference={msg} 
                            type="Message" 
                            view={true}
                        />
                    ))}
                    {item.references.files?.map((file, index) => (
                        <ReferenceChip 
                            key={`file-${index}`} 
                            reference={file} 
                            type="File" 
                            view={true}
                        />
                    ))}
                    {item.references.task_responses?.map((task, index) => (
                        <ReferenceChip 
                            key={`task-${index}`} 
                            reference={task} 
                            type="TaskResponse" 
                            view={true}
                        />
                    ))}
                    {item.references.url_references?.map((url, index) => (
                        <ReferenceChip 
                            key={`url-${index}`} 
                            reference={url} 
                            type="URLReference" 
                            view={true}
                        />
                    ))}
                    {item.references.string_outputs?.map((str, index) => (
                        <ReferenceChip
                            key={`str-${index}`} 
                            reference={str} 
                            type="string_output" 
                            view={true}
                        />
                    ))}
                </Box>
            </Box>
        );
    };
    
    const getMessageClass = () => {
        if (item.generated_by === 'tool') return classes.toolMessage;
        switch (item.role) {
            case 'user':
                return classes.userMessage;
            case 'assistant':
            default:
                return classes.assistantMessage;
        }
    };

    const listItems = [
        {
            icon: <TextSnippet />,
            primary_text: "Content",
            secondary_text: <CustomMarkdown className={`${classes.messageSmall} ${getMessageClass()}`}>{item.content}</CustomMarkdown>
        },
        {
            icon: <Person />,
            primary_text: "Role",
            secondary_text: item.role
        },
        {
            icon: <PersonPin />,
            primary_text: "Assistant",
            secondary_text: item.assistant_name ?? "N/A"
        },
        {
            icon: <Engineering />,
            primary_text: "Generated By",
            secondary_text: item.generated_by
        },
        {
            icon: <AttachFile />,
            primary_text: "References",
            secondary_text: renderReferences()
        },
        {
            icon: <Functions />,
            primary_text: "Tool Calls",
            secondary_text: item.tool_calls ? <CodeBlock language="json" code={JSON.stringify(item.tool_calls, null, 2)} /> : "N/A",
        },
        {
            icon: <Person />,
            primary_text: "Metadata",
            secondary_text: item.creation_metadata ? <CodeBlock language="json" code={JSON.stringify(item.creation_metadata, null, 2)} /> : "N/A",
        },
        {
            icon: <AccessTime />,
            primary_text: "Created At",
            secondary_text: new Date(item.createdAt || '').toLocaleString()
        },
    ];

    return (
        <CommonCardView
            elementType='Message'
            title={item.role}
            subtitle={`Type: ${item.type}`}
            id={item._id}
            listItems={listItems}
            item={item}
            itemType='messages'
        />
    );
};

export default MessageCardView;